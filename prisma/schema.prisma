// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String                       @id @default(uuid())
  name                       String
  email                      String                       @unique
  password                   String
  role                       Role                         @default(PATIENT)
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  imageUrl                   String?
  licenseNumber              String?                      @unique
  stripeCustomerId           String?                      @unique
  feelings                   Feeling[]
  DailyPositiveReinforcement DailyPositiveReinforcement[]
  Subscription               Subscription?
  Invite                     Invite[]

  professionals     ProfessionalPatient[] @relation("ProfessionalPatients_professional")
  patients          ProfessionalPatient[] @relation("ProfessionalPatients_patient")
  uploadedDocuments Document[]            @relation("UploadedDocuments")
  Document          Document[]            @relation("OwnedDocuments")
}

model Subscription {
  id             String             @id @default(uuid())
  professionalId String             @unique
  stripeSubId    String             @unique
  plan           Plan
  status         SubscriptionStatus
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  expiresAt      DateTime

  professional User @relation(fields: [professionalId], references: [id])
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
}

enum Plan {
  BASIC
  UNLIMITED
}

model Feeling {
  id          String   @id @default(uuid())
  emotion     Emotion
  intensity   Int
  trigger     String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String

  user User @relation(fields: [userId], references: [id])
}

enum Emotion {
  JOY
  SADNESS
  ANGER
  FEAR
  ANXIETY
  CALM
  FRUSTRATION
  SURPRISE
  NON_SPECIFIC
}

model DailyPositiveReinforcement {
  id            String   @id @default(uuid())
  positiveThing String
  conquest      String
  kindness      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  user          User     @relation(fields: [userId], references: [id])
}

model ProfessionalPatient {
  id             String           @id @default(uuid())
  professionalId String
  patientId      String
  createdAt      DateTime         @default(now())
  TherapySession TherapySession[]

  professional User @relation("ProfessionalPatients_professional", fields: [professionalId], references: [id])
  patient      User @relation("ProfessionalPatients_patient", fields: [patientId], references: [id])
}

model Invite {
  id        String       @id @unique @default(uuid())
  sent_by   String
  sent_to   String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  status    InviteStatus

  professional User @relation(fields: [sent_by], references: [id])
}

model TherapySession {
  id                    Int      @id @unique @default(autoincrement())
  professionalPatientId String
  done                  Boolean? @default(false)
  confirmed             Boolean? @default(false)
  startDate             DateTime
  endDate               DateTime
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  professionalPatient ProfessionalPatient @relation(fields: [professionalPatientId], references: [id])
}

model Document {
  id        String           @id @unique @default(uuid())
  url       String
  filename  String
  mimeType  String
  category  DocumentCategory
  createdAt DateTime         @default(now())

  updated_by_id String?
  updated_by    User?   @relation("UploadedDocuments", fields: [updated_by_id], references: [id])
  owner_id      String?
  owner         User?   @relation("OwnedDocuments", fields: [owner_id], references: [id])
}

enum DocumentCategory {
  MODEL
  PATIENT_UPLOAD
  PROFESSIONAL_UPLOAD
}

enum InviteStatus {
  ACCEPTED
  REJECTED
  PENDING
}

enum Role {
  PATIENT
  PROFESSIONAL
}
