// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String                       @id @default(uuid())
  name                       String
  email                      String                       @unique
  password                   String
  role                       Role                         @default(PATIENT)
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  licenseNumber              String?                      @unique
  stripeCustomerId           String?                      @unique
  feelings                   Feeling[]
  DailyPositiveReinforcement DailyPositiveReinforcement[]
  professionals              ProfessionalPatient[]        @relation("ProfessionalPatients_professional")
  patients                   ProfessionalPatient[]        @relation("ProfessionalPatients_patient")
  Subscription               Subscription?
  Invite                     Invite[]
}

model Subscription {
  id             String             @id @default(uuid())
  professionalId String             @unique
  stripeSubId    String             @unique
  plan           Plan
  status         SubscriptionStatus
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  professional User @relation(fields: [professionalId], references: [id])
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
}

enum Plan {
  BASIC
  UNLIMITED
}

model Feeling {
  id                  String   @id @default(uuid())
  mood                String
  predominant_feeling String
  description         String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id])
  userId              String
}

model DailyPositiveReinforcement {
  id            String   @id @default(uuid())
  positiveThing String
  conquest      String
  kindness      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
  userId        String
}

model ProfessionalPatient {
  id             String   @id @default(uuid())
  professional   User     @relation("ProfessionalPatients_professional", fields: [professionalId], references: [id])
  professionalId String
  patient        User     @relation("ProfessionalPatients_patient", fields: [patientId], references: [id])
  patientId      String
  createdAt      DateTime @default(now())
}

model Invite {
  id        String       @id @unique @default(uuid())
  sent_by   String
  sent_to   String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  status    InviteStatus

  professional User @relation(fields: [sent_by], references: [id])
}

enum InviteStatus {
  ACCEPTED
  REJECTED
  PENDING
}

enum Role {
  PATIENT
  PROFESSIONAL
}
